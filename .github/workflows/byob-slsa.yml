name: "RELEASE: Make Draft Release"

on:
  push:
    tags:
    - v[0-9]+.[0-9]+.[0-9]+-slsa-*

permissions: read-all

jobs:
  draft_release:
    name: draft release
    runs-on: ubuntu-latest
    outputs:
      attestation-url: ${{ steps.attest.outputs.attestation-url }}
      image-digest: ${{ steps.metadata.outputs.image-digest }}
      image-name: ${{ steps.metadata.outputs.image-name }}
      artifacts: ${{ steps.metadata.outputs.artifacts }}
      metadata: ${{ steps.metadata.outputs.metadata }}

    permissions:
      attestations: write
      contents: write
      id-token: write
      packages: write
      pull-requests: write

    steps:

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ^1.23

    - name: Goreleaser release
      id: release
      uses: goreleaser/goreleaser-action@v6
      with:
        version: latest
        args: release --clean --draft --skip announce
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Attestation
      id: attest
      #uses: actions/attest-build-provenance@v2
      #with:
      #  subject-path: |
      #    dist/**/*wtutf*tar.gz
      #    dist/**/*wtutf*zip
      #    dist/**/*wtutf*checksums.txt
      run: |
        echo "attestation-url=https://github.com/eliheady/wtutf/attestations/7010546" >> "${GITHUB_OUTPUT}"

    - name: metadata
      id: metadata
      env:
        ARTIFACTS: ${{ steps.release.outputs.artifacts }}
        METADATA:  ${{ steps.release.outputs.metadata }}
      run: |
        echo "artifacts=$(echo "$ARTIFACTS" )" >> "$GITHUB_OUTPUT"
        echo "metadata=$(echo "$METADATA" )" >> "$GITHUB_OUTPUT"
        echo "image-digest=$(echo "$ARTIFACTS" | jq -r '.[]|select(.type=="Docker Manifest")|select(.name|test(":v"))|.extra.Digest')" >> "$GITHUB_OUTPUT"
        echo "image-name=$(echo "$ARTIFACTS" | jq -r '.[]|select(.type=="Docker Manifest")|select(.name|test(":v"))|.name|split(":")[0]')" >> "$GITHUB_OUTPUT"

    #- name: Generate container attestation
    #  uses: actions/attest-build-provenance@v2
    #  with:
    #    subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    #    # todo: figure out where goreleaser stores the image sha
    #    subject-digest: ${{ fromJson(steps.release.outputs.metadata).somekey }}
    #    push-to-registry: true

  output:
    runs-on: ubuntu-latest
    needs: draft_release
    permissions:
      contents: write
    steps:
    - name: debug
      id: collect_notes
      env:
        ATTESTATION_URL: ${{ needs.draft_release.outputs.attestation-url }}
        IMAGE_DIGEST: ${{ needs.draft_release.outputs.image-digest }}
        IMAGE_NAME: ${{ needs.draft_release.outputs.image-name }}
        ARTIFACTS: ${{ needs.draft_release.outputs.artifacts }}
        METADATA: ${{ needs.draft_release.outputs.metadata }}
      run: |
        echo "attestation:"
        echo "$ATTESTATION_URL"
        echo "image:"
        echo "$IMAGE_DIGEST"
        echo "$IMAGE_NAME"
        echo "artifacts:"
        echo "$ARTIFACTS"
        echo "metadata:"
        echo "$METADATA"

        # get the body of the just-created release. This workflow is triggered by tags, so
        # the current git ref should match the release tag
        TAG=${{ github.ref }}
        TAG=${TAG#refs/tags/}
        echo "release-notes=$(gh release view $TAG --json body | jq -r .body)" >> "$GITHUB_OUTPUT"

        # get a release asset filename for doc generation
        echo "demo-artifact=$(gh release view $TAG --json assets | jq -r '.assets[1].name')" >> "$GITHUB_OUTPUT" 

    - name: Render Notes
      uses: lexty/jinja2-renderer@v1
      with:
        template_path: '.github/release-notes-footer.md'
        output_path: '/tmp/release-notes.md'
        variables: |
          release_notes=${{ steps.collect_notes.outputs.release-notes }}
          demo_artifact=${{ steps.collect_notes.outputs.demo-artifact }}
          attestation_url=${{ needs.draft_release.outputs.attestation-url }}

    - name: Replace Notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=${{ github.ref }}
        TAG=${TAG#refs/tags/}
        gh release edit $TAG --notes-file /tmp/release-notes.md

        
        

  #notes:
  #  runs-on: ubuntu-latest
  #  needs: draft-release
  #  permissions:
  #    contents: write
  #  steps:
  #  - name: Append Release Notes
  #    id: notes
  #    uses: goreleaser/goreleaser-action@v6
  #    with:
  #      version: latest
  #      args: release --config .goreleaser-notes.yml --skip archive
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

