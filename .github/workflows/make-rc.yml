# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: "RELEASE: Make Draft Release"

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-*

permissions: read-all

jobs:
  release:

    name: Draft Release
    runs-on: ubuntu-latest

    outputs:

      artifacts: ${{ steps.release.outputs.artifacts }}
      clean_semver: ${{ steps.setup.outputs.clean_semver }}
      metadata: ${{ steps.release.outputs.metadata }}
      release-tag: ${{ steps.setup.outputs.release-tag }}
      release-id: ${{ steps.release_id.outputs.release-id }}
      release-assets: ${{ steps.artifacts.outputs.release-assets }}
      image-name: ${{ steps.artifacts.outputs.image-name }}
      image-digest: ${{ steps.artifacts.outputs.image-digest }}
      
    permissions:

      attestations: write
      contents: write
      id-token: write
      packages: write
      pull-requests: write

    steps:

    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Checkout repo
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0

    - name: Setup
      id: setup
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG=${{ github.ref }}
        TAG=${TAG#refs/tags/}
        echo "release-tag=$TAG" | tee -a "$GITHUB_OUTPUT"
        previous_releases=$( (gh release view $TAG --json id 2>/dev/null || echo '{"id":"ok"}') | jq -r '.id')
        if [ "$previous_releases" != "ok" ]; then
          echo "ERROR: $(echo $previous_releases | wc -l) previous release(s) found for tag $TAG:"
          echo "$previous_releases"
          exit 1
        fi
        echo "Release $TAG does not exist. Proceeding."
        if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "This is a clean semver tag and the release will be submitted for attestation."
          echo "clean_semver=true" >> "$GITHUB_OUTPUT"
        else
          echo "NOTICE This is a pre-release tag and the attestation steps will be skipped."
          echo "clean_semver=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Login to GitHub Container Registry
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
      with:
        go-version: ^1.23

    - name: Install cosign
      uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
    - name: Install syft
      uses: anchore/sbom-action/download-syft@e11c554f704a0b820cbf8c51673f6945e0731532 # v0.20.0

    - name: Goreleaser release
      id: release
      uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
      with:
        version: '~> v2'
        args: release --clean --draft --skip announce
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get Release Artifacts
      id: artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "image-digest=$(echo '${{ steps.release.outputs.artifacts}}' | jq -r '.[]|select(.type=="Docker Manifest")|select(.name|test(":v"))|.extra.Digest')" >> "$GITHUB_OUTPUT"
        echo "image-name=$(echo '${{ steps.release.outputs.artifacts}}' | jq -r '.[]|select(.type=="Docker Manifest")|select(.name|test(":v"))|.name|split(":")[0]')" >> "$GITHUB_OUTPUT"

    # Upload all built artifacts for attestation
    - name: Upload build artifacts for attestation
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: build-artifacts
        path: |
          dist/*wtutf*
          dist/checksums*

    - name: Get Release ID
      id: release_id
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: ${{ steps.setup.outputs.release-tag }}
      run: |
        release_id=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/releases | jq ".[] | select(.tag_name == \"$RELEASE_TAG\").id")
        echo "release-id=$release_id" | tee -a "$GITHUB_OUTPUT"

  attest-packages:
    name: Package Provenance Attestation
    needs: [release]
    permissions:
      attestations: write
      id-token: write
      contents: read
    if: needs.release.outputs.clean_semver == 'true'
    uses: eliheady/wtutf/.github/workflows/attest.yml@0edc67d4f0b1dd68f8f0d93477cb1cb255c68a88
    secrets: inherit
    with:
      artifact-upload-name: build-artifacts
      artifact-restore-path: dist
      subject-path: |
        dist/*wtutf*
        dist/checksums*
    
  attest-images:
    name: Image Provenance Attestation
    needs: [release]
    permissions:
      attestations: write
      id-token: write
      contents: read
      #packages: write # push attestation to the registry
    if: needs.release.outputs.image-name != '' && needs.release.outputs.image-digest != ''
    #if: needs.release.outputs.clean_semver == 'true' && needs.release.outputs.image-name != '' && needs.release.outputs.image-digest != ''
    uses: eliheady/wtutf/.github/workflows/attest.yml@0edc67d4f0b1dd68f8f0d93477cb1cb255c68a88
    secrets: inherit
    with:
      subject-name: ${{ needs.release.outputs.image-name }}
      subject-digest: ${{ needs.release.outputs.image-digest }}

  notes:
    runs-on: ubuntu-latest
    needs:
      - release
      - attest-packages
      - attest-images
    name: Add Release Notes

    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - name: Debug Attest Outputs
      run: |
        echo "Attest packages outputs: ${{ toJson(needs.attest-packages.outputs) }}"
        echo "Attest images outputs: ${{ toJson(needs.attest-images.outputs) }}"

    - name: Attestation Notes
      if: needs.release.outputs.clean_semver == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        RELEASE_TAG: ${{ needs.release.outputs.release-tag }}
        RELEASE_ID: ${{ needs.release.outputs.release-id }}
        ATTESTATION_URL_PACKAGES: ${{ needs.attest-packages.outputs.attestation-url }}
        ATTESTATION_URL_IMAGES: ${{ needs.attest-images.outputs.attestation-url }}
      run: |-
        if [ -n "$ATTESTATION_URL_PACKAGES" ]; then
          PKG_ATTEST="  - [$ATTESTATION_URL_PACKAGES]($ATTESTATION_URL_PACKAGES)"
        fi
        if [ -n "$ATTESTATION_URL_IMAGES" ]; then
          IMG_ATTEST="  - [$ATTESTATION_URL_IMAGES]($ATTESTATION_URL_IMAGES)"
        fi
        tmpfile=$(mktemp)
        RELEASE_NOTES_FILE=$tmpfile-notes.md
        echo $RELEASE_NOTES_FILE
        gh release view $RELEASE_TAG --json body -R ${{ github.repository }} | jq -r '.body' > $RELEASE_NOTES_FILE

        cat >> $RELEASE_NOTES_FILE <<EOF
        ## Verify Release Artifacts

        Attestation(s) for this release:
        $PKG_ATTEST
        $IMG_ATTEST

        To verify packages in this release: download a release artifact, install \`gh\` and run this command (all artifacts are signed, change \`checksums.txt\` as needed for your use-case):

        \`\`\`shell
        gh attestation verify checksums.txt -R ${{ github.repository }}
        \`\`\`
        EOF

        # "gh release edit" can sometimes create new releases, which is not what we want here.
        #gh release edit ${RELEASE_TAG} --notes-file $RELEASE_NOTES_FILE
        gh api --method PATCH \
          -H "Accept: application/vnd.github.v3+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/releases/${RELEASE_ID} \
          -f "body=$(cat $RELEASE_NOTES_FILE)" \
          -f "make_latest=false"
        echo "release-notes=$RELEASE_NOTES_FILE" >> "$GITHUB_OUTPUT"
